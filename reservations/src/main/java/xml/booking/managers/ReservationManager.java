package xml.booking.managers;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import xml.booking.dto.ReservationAccommodationInfo;
import xml.booking.dto.ReservationDTO;
import xml.booking.dto.UserDTO;
import xml.booking.model.Accommodation;
import xml.booking.model.AccommodationUnit;
import xml.booking.model.Comment;
import xml.booking.model.Message;
import xml.booking.model.Rating;
import xml.booking.model.Reservation;
import xml.booking.model.User;
import xml.booking.repositories.ReservationRepository;

/**
 * Generated by Spring Data Generator on 08/06/2019
 */
@Component
public class ReservationManager {

	private ReservationRepository reservationRepository;

	@Autowired
	public ReservationManager(ReservationRepository reservationRepository) {
		this.reservationRepository = reservationRepository;
	}

	public ReservationDTO getReservation(Long id) {
		Reservation reservation = this.reservationRepository.findByIdAndDeleted(id, false) ;
		if(reservation == null)
			return null;
		
		
		return new ReservationDTO(reservation);
	}

	/**
	 * Metoda za preuzimanje jedne stranice sa delom svih rezervacija
	 * 
	 * @param page stranica koja se preuzima
	 * @return rezervacije na stranici
	 * @see Pageable
	 * @see Page
	 * @see ReservationDTO
	 */
	public Page<ReservationDTO> getAllReservations(Pageable page) {
		return reservationRepository.findByDeleted(page, false).map(new Function<Reservation, ReservationDTO>() {
			@Override
			public ReservationDTO apply(Reservation reservation) {
				ReservationDTO reservationDTO = new ReservationDTO(reservation);
				return reservationDTO;
			}
		});
	}
	
	public List <ReservationDTO> getAllReservationsList() {
		return reservationRepository.findByDeleted(false).stream().map(reservation -> new ReservationDTO(reservation)).collect(Collectors.toList());
	}


	public ReservationDTO createReservation(ReservationDTO reservationDTO, AccommodationUnit unit, BigDecimal price, UserDTO userDTO) {
		User user = new User();
		user.setId(userDTO.getId());
		Reservation reservation = new Reservation();
		reservation.setAccommodationUnit(unit);
		reservation.setBeginningDate(reservationDTO.getBeginningDate());
		reservation.setEndDate(reservationDTO.getEndDate());
		reservation.setUser(user);
		reservation.setCheckedIn(false);
		reservation.setDeleted(false);
		reservation.setFinalPrice(price);
		
		Reservation saved = this.reservationRepository.save(reservation);

		return (saved == null)? null : new ReservationDTO(saved);
	}

	public boolean removeReservation(Long id) {
		Reservation reservation = this.reservationRepository.findByIdAndDeleted(id, false);
		reservation.setDeleted(true);
		Reservation reservationSaved = this.reservationRepository.save(reservation);
		return (reservationSaved == null)? false:true;
	}

	/**
	 * Metoda za preuzimanje svi rezervacije odredjene smestajne jedinice
	 * 
	 * @return List<Reservation> listu svih pronadjenih rezervacija
	 * @see List
	 * @see AccommodationUnit
	 */
	public List<ReservationDTO> getAllAccommodationUnitReservations(Long id) {
		return this.reservationRepository.findAllReservationAccommodationUnit(id).stream().map(reservation -> new ReservationDTO(reservation)).collect(Collectors.toList());
	}
	
	
	public List<ReservationAccommodationInfo> getAllUserReservations(Long id) {
		List<Reservation> reservations = this.reservationRepository.findAllUserReservation(id);
		List<ReservationAccommodationInfo> reservationAccommodation = new ArrayList<>();
		for(Reservation r : reservations) {
			 Accommodation accommodation = this.reservationRepository.findAccommodationInfoReservation(r.getId());
			 ReservationAccommodationInfo temp = new ReservationAccommodationInfo(r);
			 temp.setAccommodationName(accommodation.getName());
			 temp.setAgentFirstName(accommodation.getUser().getFirstName());
			 temp.setAgentLastName(accommodation.getUser().getLastName());
			 reservationAccommodation.add(temp);
			 
		}
		return reservationAccommodation;
	}
	/**
	 * Metoda za postavljanje ocene za rezervaciju
	 */
	public boolean saveReservationRating(Rating rating, Long id) {
		Reservation reservation = this.reservationRepository.findByIdAndDeleted(id, false);
		if(reservation == null)
			return false;
		reservation.setRating(rating);
		Reservation saved = this.reservationRepository.save(reservation);
		return (saved == null)? false : true;
	}

	/**
	 * Metoda za postavljanje komentara za rezervaciju
	 */
	public boolean saveReservationComment(Comment comment, Long id) {
		Reservation reservation = this.reservationRepository.findByIdAndDeleted(id, false);
		if(reservation == null)
			return false;
		reservation.setComment(comment);
		Reservation saved = this.reservationRepository.save(reservation);
		return (saved == null)? false : true;
	}

	public boolean saveReservationMessage(Message message, Long id) {
		Reservation reservation = this.reservationRepository.findByIdAndDeleted(id, false);
		if(reservation == null) {
			return false;
		}
		
		if(reservation.getMessage() == null) {
			reservation.setMessage(new ArrayList<Message>());
		}
		reservation.getMessage().add(message);
		Reservation saved = this.reservationRepository.save(reservation);
		return (saved == null)? false : true;

	}



}
