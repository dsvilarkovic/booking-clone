package xml.booking.repositories;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import xml.booking.model.AccommodationCategory;
import xml.booking.model.AccommodationType;
import xml.booking.model.AccommodationUnit;
import xml.booking.model.AdditionalService;

/**
* Generated by Spring Data Generator on 18/05/2019
*/
@Repository
public interface AccommodationUnitRepository extends JpaRepository<AccommodationUnit, Long>, JpaSpecificationExecutor<AccommodationUnit> {
	
	@Query("select au from Accommodation as acc inner join acc.accommodationUnit as au inner join acc.location as loc "
		 + "where au.deleted = :deleted "
			//provera poklapanja unete lokacije sa adresom/gradom/drzavom i provera unetog kapaciteta
		 + "and (lower(loc.address) like lower(concat('%', :location,'%')) or lower(loc.country) like lower(concat('%', :location,'%')) "
	     + "or lower(loc.city) like lower(concat('%', :location,'%'))) and au.capacity >= :persons "
	       //provera da li vec postoji rezervacija u tom periodu
	     + "and au not in (select distinct unit from Reservation as res inner join res.accommodationUnit as unit where "
	     + "((res.beginningDate <= :beg and res.endDate >= :end) or (res.beginningDate >= :beg and res.beginningDate < :end) or " 
	     + "(res.endDate > :beg and res.endDate <= :end)) and res.deleted = false and unit.deleted = false) "
	       //provera da li je agent oznacio neki dan kao zauzet
	     + "and au not in (select distinct acunit from AccommodationUnit as acunit inner join acunit.day as dd "
	     + "where dd.date >= :beg and dd.date <= :end and dd.available = false and acunit.deleted = false)")
	Page<AccommodationUnit> regularSearch(Pageable page, @Param("location") String location, @Param("persons") Integer numberOfPersons, 
										 @Param("beg") Long beginningDate, @Param("end") Long endDate, @Param("deleted")Boolean deleted);
	
	@Query("select au from Accommodation as acc inner join acc.accommodationUnit as au inner join acc.location as loc "
		 + "inner join acc.accommodationType as act inner join acc.accommodationCategory as acat where au.deleted = :deleted "
         //provera svih dodatnih usluga koje su trazene - ukoliko su unete
         + "and acc in (select accc from Accommodation as accc where ((:services) is null or not exists "
         + "(select addService from AdditionalService as addService where addService in (:services) " 
         + "and addService not in (select addService2 from Accommodation as aa inner join aa.additionalService as addService2 " 
         + "where aa = accc )))) "
		   //provera poklapanja unete lokacije sa adresom/gradom/drzavom i provera unetog kapaciteta
		 + "and (lower(loc.address) like lower(concat('%', :location,'%')) or lower(loc.country) like lower(concat('%', :location,'%')) "
         + "or lower(loc.city) like lower(concat('%', :location,'%'))) and au.capacity >= :persons " 
           //provera tipa i kategorije - ukoliko su uneti
         + "and (:type is null or act.id = :type) and (:category is null or acat.id = :category) "
           //provera da li vec postoji rezervacija u tom periodu
         + "and au not in (select unit from Reservation as res inner join res.accommodationUnit as unit where "
         + "((res.beginningDate <= :beg and res.endDate >= :end) or (res.beginningDate >= :beg and res.beginningDate < :end) or " 
         + "(res.endDate > :beg and res.endDate <= :end)) and res.deleted = false and unit.deleted = false) "
           //provera da li je agent oznacio neki dan kao zauzet
         + "and au not in (select distinct acunit from AccommodationUnit as acunit inner join acunit.day as dd "
	     + "where dd.date >= :beg and dd.date <= :end and dd.available = false and acunit.deleted = false)")
	List<AccommodationUnit> advancedSearch(@Param("location") String location, @Param("persons") Integer numberOfPersons, 
			       						  @Param("beg") Long beginningDate, @Param("end") Long endDate, @Param("deleted") Boolean deleted, 
			       						  @Param("type") Long accommodationType, @Param("category") Long accommodationCategory,
				                          @Param("services") List<AdditionalService> services);

}
