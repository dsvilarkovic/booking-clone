package xml.booking.managers;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import xml.booking.dto.AccommodationDTO;
import xml.booking.dto.AccommodationUnitDTO;
import xml.booking.model.Accommodation;
import xml.booking.model.AccommodationUnit;
import xml.booking.model.AdditionalService;
import xml.booking.model.Image;
import xml.booking.repositories.AccommodationRepository;

/**
* Generated by Spring Data Generator on 19/06/2019
*/
@Component
public class AccommodationManager {

	private AccommodationRepository accommodationRepository;

	@Autowired
	public AccommodationManager(AccommodationRepository accommodationRepository) {
		this.accommodationRepository = accommodationRepository;
	}
	

	public List<AccommodationDTO> getAllAccommodation() {
		return accommodationRepository.findByDeleted(false).stream().map(accommodation -> new AccommodationDTO(accommodation)).collect(Collectors.toList());
		
	}
	
	public Page<AccommodationDTO> getAllAccommodationPageable(Pageable page) {
		return accommodationRepository.findByDeleted(page, false).map(new Function<Accommodation, AccommodationDTO>() {
			@Override
			public AccommodationDTO apply(Accommodation accommodation) {
				AccommodationDTO accommodationDTO = new AccommodationDTO(accommodation);
				return accommodationDTO;
			}
		});
	}
	
	public Accommodation findById(Long id) {
		Accommodation accommodation = this.accommodationRepository.findByIdAndDeleted(id, false);
		return accommodation;
	}
	
	public List<Image> getAccommodationImageList(Long id) {
		Accommodation accommodation = this.accommodationRepository.findByIdAndDeleted(id, false);
		if(accommodation == null) {
			return null;
		}
		//TODO: Obrati paznju ako je null sta ce se desiti da li da saljem prazan?
		return accommodation.getImage();
	}
	
	public Page<AccommodationUnitDTO> getAccommodationUnit(Pageable page, Long id)  {
		Accommodation accommodation = this.accommodationRepository.findByIdAndDeleted(id, false);
		if(accommodation == null )
			return null;
		Page<AccommodationUnit> accommodationUnitPage = this.accommodationRepository.findAccommodationUnits(page, id);
		return accommodationUnitPage.map(new Function<AccommodationUnit, AccommodationUnitDTO>() {
			@Override
			public AccommodationUnitDTO apply(AccommodationUnit accommodationUnit) {
				AccommodationUnitDTO accommodationUnitDTO = new AccommodationUnitDTO(accommodationUnit);
				return accommodationUnitDTO;
			}
		});
	}
	
	public Page<AdditionalService> getAdditionalServices(Pageable page, Long id)  {
		Accommodation accommodation = this.accommodationRepository.findByIdAndDeleted(id, false);
		if(accommodation == null )
			return null;
		Page<AdditionalService> additionalServicePage = this.accommodationRepository.findAdditionalServices(page, id);
		return additionalServicePage;
	}
	

}
